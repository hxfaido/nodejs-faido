
//msg header use json : such as {len:bodysize}


var begin_char = String.prototype.charCodeAt.call("{",0);
var end_char = String.prototype.charCodeAt.call("}",0);

function hjson(recvsize){
   
    //store parse state 
    this.inter_head = "";
	this.maxrecvsize = recvsize;
	var tmp_head = {"len":recvsize};
	var str = JSON.stringify(tmp_head);
	this.maxrecvhead = str.length;
}

//parse buffer to get head , return offset for body, and body len
hjson.prototype.decode = function(buffer, offset, end){

    if(offset >= end)
    {
	return {off:-1, len:-1};
    }
    
    //get begin
    if(this.inter_head.length === 0)
    {
	//check the begin char code
	if( buffer[offset] != begin_char){
	    throw new Error("head not start with {");
	}   
    }
    
    //get end
    var i;
    for(i = offset; i < end; i++){
	if(buffer[i] == end_char)
	{
	    break;
	}
    }
    
    //i mean index, by slice need end, so i+1
    var _min_end = Math.min(i+1,end);
    
    this.inter_head += buffer.toString("utf8",offset,_min_end);
    
	//check head string len
	if(this.inter_head.length > this.maxrecvhead)
	{
		//reset
		this.inter_head = "";
		throw new Error("invalid json head string length");		
	}
	
    //no more data now, head is not complete
    if (i == end) {
	return {off:-1, len:-1};
    }
    
    var bodylen = -1;
    try
    {  
	var head = JSON.parse(this.inter_head);
       
	bodylen = head.len;
	
	//reset
	this.inter_head = "";
    }
    catch(e)
    {
	//reset
	this.inter_head = "";
       
	throw e;
    }
	
	//check body size
	if(bodylen > this.maxrecvsize)
	{
		throw new Error("invalid json head body size");	
	}

    return {off:_min_end, len:bodylen};
};


//create head from body buffer
hjson.prototype.encode = function(body){
    
    var head = {"len":body.length};  
    
    var str = JSON.stringify(head);
    
    return new Buffer(str,"utf8");
};

module.exports = hjson;
