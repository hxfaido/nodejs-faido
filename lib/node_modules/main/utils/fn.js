
//export some useful functions

//copy src obj propertys to dst obj
exports.extend = function(dst,src,delete_flag){
    
    delete_flag = delete_flag === undefined ? true : !!delete_flag;
    
    //delete first
    if(delete_flag){
	
	for(var key in dst){
		if(src[key] === undefined){
		    delete dst[key];
		}
	}
    }
    
    //copy
    for(var _key in src){
	if(src[_key] !== undefined)
	{
	    dst[_key] = src[_key];
	}
    }
};

//get file name and line number
var path = require("path");
var cwd = process.cwd();

//get our module path
var module_path = __dirname.slice(0,__dirname.indexOf("utils"));

var old_prepare_fn = Error.prepareStackTrace;
var new_prepare_fn = function (_,stack){ 
   return stack;
};

exports.fline = function(index) {
      
    //just return the stack obj, since the old function will handle all stack, which will cost some time.
    Error.prepareStackTrace = new_prepare_fn;
    
    var e = new Error();
    
    var s = e.stack[index];
    
    var str;
    // we use relative path for filename
    if(s){
       
	var filename;
	var fullpath = s.getFileName();
	
	//check is native file
	var id = fullpath.indexOf(module_path);
	if(id === 0){
            filename = "sys_main:" + fullpath.slice(module_path.length); 
	}
	else{
            filename = path.relative(cwd,fullpath);
	}
       
	str = "(" + filename + " " + s.getLineNumber() + ") ";
    }
    else
    {
	str = "";
    }
   
    Error.prepareStackTrace = old_prepare_fn;
    
    return str;
};

//inherit
exports.inherit = function(child, parent) {
    
    child.prototype.__proto__ = parent.prototype;

    //----- node.js util use below method. -----//
    //this method must init prototype at the begin time

    //child.prototype = new parent();
    //child.prototype.constructor = child;  //function's prototype.constructor need point to function
};

